name: üöÄ Deploy GazaAidSync to VPS

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    # // if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    # Note: Uncomment the above line to enable deploys on direct pushes to main branch as well as merged PRs.

    steps:
      # 1Ô∏è‚É£ Checkout the latest code from repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Cache dependencies for faster CI builds
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 3Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Check if dependencies changed
        id: deps-check
        run: |
          if [[ "${{ steps.cache.outputs.cache-hit }}" == 'true' ]]; then
            echo "skip-install=true" >> $GITHUB_OUTPUT
          else
            echo "skip-install=false" >> $GITHUB_OUTPUT
          fi
      
      # 4Ô∏è‚É£ Install all deps (if cache miss)
      - name: Install dependencies (for build)
        if: steps.deps-check.outputs.skip-install == 'false'
        run: npm ci --legacy-peer-deps

      # 5Ô∏è‚É£ Generate Prisma Client (local, optional)
      # - name: Generate Prisma Client
      #   run: npx prisma generate
      
      # Note: This step is commented out because Prisma Client will be generated during the server-side build. It's command is included in the build command itself.

      # 6Ô∏è‚É£ (Optional) Build check ‚Äî only to catch local build errors early
      - name: Build Check (optional)
        run: npm run build --if-present

      # 7Ô∏è‚É£ Setup SSH connection
      - name: Setup SSH Connection
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      # Deploy build with auto backup and rotation
      # 8Ô∏è‚É£ Upload source files to a TEMP dir on the VPS (atomic swap/deploy)
      - name: Upload source to VPS (to temp dir)
        env:
            VPS_USER: ${{ secrets.VPS_USER }}
            VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
            echo "üì¶ Starting atomic upload..."
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV  # ‚úÖ Export for next step

            TMPDIR="/home/${VPS_USER}/htdocs/www.gaza.family_deploy_${TIMESTAMP}"
            REMOTE_BACKUPS_DIR="/home/${VPS_USER}/backups/www.gaza.family"

            # make tmpdir & backups dir
            echo "üõ†Ô∏è Creating tmp & backup dirs on remote..."
            ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} "mkdir -p ${TMPDIR} ${REMOTE_BACKUPS_DIR}"

            # Upload files dynamically from .deployinclude (no hardcoding)
            echo "üöÄ Uploading source files to ${TMPDIR}..."
            rsync -avz --delete \
              -e "ssh -o StrictHostKeyChecking=no" \
              --exclude='.git' \
              --exclude='.github' \
              --exclude='*.log' \
              --exclude='scripts' \
              --exclude='node_modules' \
              --include-from='.deployinclude' \
              ./ ${VPS_USER}@${VPS_HOST}:${TMPDIR}/

      # 9Ô∏è‚É£ Perform server-side build, swap atomically, restart pm2, rotate backups
      - name: Build & Activate on VPS (atomic, with rollback & backup rotation)
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          TIMESTAMP: ${{ env.TIMESTAMP }}  # ‚úÖ Reuse same timestamp
        run: |
          echo "üîÅ Building & activating new version on VPS..."

          ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} \
            "bash -s -- ${TIMESTAMP}" <<'EOF'
            set -euo pipefail

            # Use timestamp from env
            TIMESTAMP="$1"
            VPS_USER="${USER}"

            TMPDIR="/home/${VPS_USER}/htdocs/www.gaza.family_deploy_${TIMESTAMP}"
            LIVEDIR="/home/${VPS_USER}/htdocs/www.gaza.family"
            BACKUP_DIR="/home/${VPS_USER}/backups/www.gaza.family"

            echo "üìÇ Preparing to activate build at ${TMPDIR}"

            # Ensure backup dir exists
            mkdir -p "${BACKUP_DIR}"

            # Clean up old temporary deploy directories (older than 1 day)
            echo "üßπ Cleaning old temporary deploy directories..."
            find /home/${VPS_USER}/htdocs -maxdepth 1 -type d -name 'www.gaza.family_deploy_*' -mtime +1 -exec rm -rf {} + || true

            if [ ! -d "${TMPDIR}" ]; then
              echo "‚ùå ERROR: Temp directory not found (${TMPDIR})"
              exit 1
            fi

            # Preserve existing .env
            if [ -f "${LIVEDIR}/.env" ]; then
              echo "üîê Preserving existing .env"
              cp "${LIVEDIR}/.env" "${TMPDIR}/.env"
            fi

            # install production dependencies inside tmpdir
            echo "üì¶ Installing production dependencies in tmp and building on VPS..."
            cd "${TMPDIR}"

            # Load Node version via nvm (pm2 uses nvm)
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"


            # üß† Smart install: skip if no deps changed
            if [ -f "$LIVEDIR/package-lock.json" ] && cmp -s package-lock.json "$LIVEDIR/package-lock.json"; then
              echo "‚úÖ No dependency changes ‚Äî skipping npm ci"
            else
              echo "üì¶ Installing dependencies..."
              npm ci --legacy-peer-deps
            fi

            echo "‚öôÔ∏è Generating Prisma client..."
            # npx prisma generate || echo "‚ö†Ô∏è Prisma generate failed (ignored)" # We'll comment this command out since it'll be run during build command next

            echo "üèóÔ∏è Building Next.js app..."
            npm run build


            # sanity check: ensure build files exist
            if [ ! -d ".next" ]; then
              echo "‚ùå Build artifact .next missing in tmpdir. Aborting."
              exit 1
            fi

            # Backup current live version
            if [ -d "${LIVEDIR}" ]; then
              echo "üóÑÔ∏è Backing up current live site..."
              mkdir -p "${BACKUP_DIR}"
              cp -r "${LIVEDIR}" "${BACKUP_DIR}/backup_${TIMESTAMP}"
            fi

            # atomic swap: move tmpdir into place
            echo "üîÅ Swapping ${TMPDIR} ‚Üí ${LIVEDIR}"
            # remove live dir and move new into place (we already made a backup)
            rm -rf "${LIVEDIR}"
            mv "${TMPDIR}" "${LIVEDIR}"

            # ensure correct owner permissions (in case)
            chown -R $(whoami):$(whoami) "${LIVEDIR}"

            # reload pm2 (zero-downtime)
            echo "‚ôªÔ∏è Restarting PM2 process..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            if pm2 reload gaza-family --update-env; then
              echo "‚úÖ PM2 reloaded successfully."
            else
              echo "‚ö†Ô∏è PM2 reload failed, attempting fresh start..."
              # try start, otherwise rollback
              pm2 start npm --name "gaza-family" -- run start || true

              if ! pm2 list | grep -q "gaza-family.*online"; then
                echo "üîÅ PM2 failed to start: rolling back to previous backup..."
                LATEST_BACKUP=$(ls -dt ${BACKUP_DIR}/backup_* 2>/dev/null | head -n 1 || true)
                if [ -n "$LATEST_BACKUP" ] && [ -d "$LATEST_BACKUP" ]; then
                  rm -rf "${LIVEDIR}"
                  cp -r "$LATEST_BACKUP" "${LIVEDIR}"
                  pm2 reload gaza-family --update-env || pm2 start npm --name "gaza-family" -- run start
                else
                  echo "‚ö†Ô∏è No backup found ‚Äî manual fix needed!"
                  exit 1
                fi
              fi
            fi

            # Rotate backups (keep 3 latest)
            echo "üßπ Cleaning old backups..."
            cd "${BACKUP_DIR}"
            ls -dt backup_* 2>/dev/null | tail -n +4 | xargs -r rm -rf || true

            echo "‚úÖ Deployment completed successfully."
          EOF