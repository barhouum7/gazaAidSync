name: üöÄ Deploy GazaAidSync to VPS

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    # // if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    # Note: Uncomment the above line to enable deploys on direct pushes to main branch as well as merged PRs.

    steps:
      # 1Ô∏è‚É£ Checkout the latest code from repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Cache dependencies for faster CI builds
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 3Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # 4Ô∏è‚É£ Install all deps (including dev, for build & prisma)
      - name: Install dependencies (for build)
        run: npm ci --legacy-peer-deps

      # 5Ô∏è‚É£ Generate Prisma Client
      - name: Generate Prisma Client
        run: npx prisma generate

      # 6Ô∏è‚É£ Build Next.js App
      - name: Build Next.js App
        run: npm run build

      # 7Ô∏è‚É£ (Optional) Try to prune dev deps locally, but ignore failure (to reduce deploy size)
      - name: Try prune dev deps (best-effort)
        run: npm prune --omit=dev --legacy-peer-deps || echo "‚ö†Ô∏è prune skipped due to conflicts"

      # 8Ô∏è‚É£ Setup SSH connection
      - name: Setup SSH Connection
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      # 9Ô∏è‚É£ Deploy build with auto backup and rotation
      # Sync only built production files (super fast deploy)
      # Upload built production files to a TEMP dir on the VPS (atomic swap)
      - name: Upload build to VPS (to temp dir)
        env:
            VPS_USER: ${{ secrets.VPS_USER }}
            VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
            echo "üì¶ Starting atomic upload..."
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV  # ‚úÖ Export for next step

            TMPDIR="/home/${VPS_USER}/htdocs/www.gaza.family_deploy_${TIMESTAMP}"
            REMOTE_BACKUPS_DIR="/home/${VPS_USER}/backups/www.gaza.family"

            # make tmpdir & backups dir
            echo "üõ†Ô∏è Creating tmp & backup dirs on remote..."
            ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} "mkdir -p ${TMPDIR} ${REMOTE_BACKUPS_DIR}"

            # rsync build-only artifacts into tmpdir (ignore missing files)
            # NOTE: do NOT include node_modules here; server will install production deps in tmpdir
            echo "üöÄ Uploading build to ${TMPDIR}..."
            rsync -avz --delete --ignore-missing-args \
              -e "ssh -o StrictHostKeyChecking=no" \
              --exclude='.git' \
              --exclude='.github' \
              --exclude='*.log' \
              --exclude='scripts' \
              --exclude='node_modules' \
              .next/ package.json package-lock.json public prisma \
              ${VPS_USER}@${VPS_HOST}:${TMPDIR}/

      # Perform server-side install in tmpdir, swap atomically, restart pm2, rotate backups
      - name: Swap & Activate on VPS (atomic, with rollback & backup rotation)
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          TIMESTAMP: ${{ env.TIMESTAMP }}  # ‚úÖ Reuse same timestamp
        run: |
          # Run remote atomic activation
          echo "üîÅ Activating new build on VPS..."
          ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} bash -s <<EOF
            set -euo pipefail
            
            # Use timestamp from env
            TIMESTAMP="${{ env.TIMESTAMP }}"
            TMPDIR="/home/${VPS_USER}/htdocs/www.gaza.family_deploy_${TIMESTAMP}"
            LIVEDIR="/home/${VPS_USER}/htdocs/www.gaza.family"
            BACKUP_DIR="/home/${VPS_USER}/backups/www.gaza.family"

            echo "üîÅ Preparing to activate build at ${TMPDIR}"

            # ensure backups dir exists
            mkdir -p "${BACKUP_DIR}"

            if [ ! -d "${TMPDIR}" ]; then
                echo "‚ùå ERROR: Build directory not found (${TMPDIR})."
                exit 1
            fi

            # Preserve existing .env if exists
            if [ -f "${LIVEDIR}/.env" ]; then
              echo "üîê Preserving existing .env to tmp build"
              cp "${LIVEDIR}/.env" "${TMPDIR}/.env" || true
            fi

            # install production dependencies inside tmpdir
            echo "üì¶ Installing production dependencies in tmp build..."
            cd "${TMPDIR}"

            # load nvm if present (pm2 uses nvm)
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # Use npm ci in tmpdir to install production deps
            npm ci --omit=dev --legacy-peer-deps

            # sanity check: ensure build files exist
            if [ ! -d "${TMPDIR}/.next" ]; then
              echo "‚ùå Build artifact .next missing in tmpdir; aborting."
              exit 1
            fi

            # create a backup of current live dir (if exists)
            if [ -d "${LIVEDIR}" ]; then
              echo "üóÑÔ∏è Backing up current live site..."
              mkdir -p "${BACKUP_DIR}"
              cp -r "${LIVEDIR}" "${BACKUP_DIR}/backup_${TIMESTAMP}"
            else
              echo "‚ÑπÔ∏è No existing live directory to backup."
            fi

            # atomic swap: move tmpdir into place
            echo "üîÅ Swapping ${TMPDIR} -> ${LIVEDIR}"
            
            # remove live dir and move new into place (we already made a backup)
            rm -rf "${LIVEDIR}"
            mv "${TMPDIR}" "${LIVEDIR}"

            # ensure correct owner permissions (in case)
            chown -R $(whoami):$(whoami) "${LIVEDIR}"

            # reload pm2 (zero-downtime)
            echo "‚ôªÔ∏è Reloading PM2 process..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            if pm2 reload gaza-family --update-env; then
              echo "‚úÖ PM2 reloaded successfully."
            else
              echo "‚ùå PM2 reload failed ‚Äî attempting to start or rollback..."
              # try start, otherwise rollback
              pm2 start npm --name "gaza-family" -- run start || true

              if ! pm2 list | grep -q "gaza-family.*online"; then
                echo "üîÅ PM2 failed to start: rolling back to previous backup..."
                LATEST_BACKUP=$(ls -dt ${BACKUP_DIR}/backup_* 2>/dev/null | head -n 1 || true)
                if [ -n "$LATEST_BACKUP" ] && [ -d "$LATEST_BACKUP" ]; then
                  rm -rf "${LIVEDIR}"
                  cp -r "$LATEST_BACKUP" "${LIVEDIR}"
                  pm2 reload gaza-family --update-env || pm2 start npm --name "gaza-family" -- run start
                else
                  echo "‚ö†Ô∏è No backup available ‚Äî manual intervention needed!"
                  exit 1
                fi
              fi
            fi

            # rotate old backups (keep latest 3)
            echo "üßπ Rotating backups (keep last 3)..."
            cd "${BACKUP_DIR}"
            ls -dt backup_* 2>/dev/null | tail -n +4 | xargs -r rm -rf || true

            echo "‚úÖ Activation finished."
            echo "‚úÖ Deployment completed successfully."
          EOF