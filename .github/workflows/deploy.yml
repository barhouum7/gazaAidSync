name: 🚀 Deploy GazaAidSync to VPS

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      # 1️⃣ Checkout the latest code from repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2️⃣ Cache dependencies for faster CI builds
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 3️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # 4️⃣ Install all dependencies
      - name: Install Dependencies
        run: npm ci --legacy-peer-deps

      # 5️⃣ Generate Prisma Client
      - name: Generate Prisma Client
        run: npx prisma generate

      # 6️⃣ Build Next.js App
      - name: Build Next.js App
        run: npm run build

      # 7️⃣ Remove dev dependencies (to reduce deploy size) - Safe mode
      - name: Prune Dev Dependencies
        run: npm prune --omit=dev --legacy-peer-deps || echo "⚠️ Skipping prune due to dependency conflict"

      # 8️⃣ Setup SSH connection
      - name: Setup SSH Connection
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      # 9️⃣ Deploy build with auto backup and rotation
      # Sync only built production files (super fast deploy)
      - name: Deploy to VPS
        run: |
          echo "📦 Deploying optimized build to VPS..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/backups/www.gaza.family"

          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "🗄️ Creating backup before deploy..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "
            cp -r ~/htdocs/www.gaza.family ~/backups/www.gaza.family/backup_${TIMESTAMP} || echo '⚠️ No previous deployment to backup.';
            cd ~/backups/www.gaza.family;
            ls -dt backup_* 2>/dev/null | tail -n +4 | xargs -r rm -rf;
            echo '🧹 Old backups pruned, only the latest 3 retained.';
          "

          echo "⬆️ Uploading new build files..."
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='*.log' \
            --exclude='scripts' \
            .next/ package.json package-lock.json public prisma node_modules \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/htdocs/www.gaza.family/

      # 🔟 Restart PM2 and run commands remotely with rollback safety if failed
      - name: Run Remote Commands
        run: |
          echo "⚙️ Running post-deploy steps on VPS..."
          echo "🚀 Restarting PM2 on VPS..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            cd ~/htdocs/www.gaza.family

            echo "🔧 Loading Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            echo "♻️ Reloading PM2 process..."
            if pm2 reload gaza-family --update-env; then
              echo "✅ PM2 restarted successfully."
            else
              echo "❌ PM2 reload failed. Initiating rollback..."
              LATEST_BACKUP=$(ls -dt ~/backups/www.gaza.family/* | head -n 1)
              if [ -d "$LATEST_BACKUP" ]; then
                echo "🔁 Restoring previous version from $LATEST_BACKUP..."
                rm -rf ~/htdocs/www.gaza.family
                cp -r "$LATEST_BACKUP" ~/htdocs/www.gaza.family
                pm2 reload gaza-family --update-env || pm2 start npm --name "gaza-family" -- run start
              else
                echo "⚠️ No backup found. Rollback skipped."
              fi
            fi

            echo "✅ Deployment workflow finished successfully!"
          EOF
